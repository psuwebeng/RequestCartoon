{"version":3,"sources":["Firebase.js","App.js","serviceWorker.js","components/Edit.js","components/Create.js","components/Show.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","settings","timestampsInSnapshots","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCollectionUpdate","querySnapshot","request_cartoon","forEach","doc","_doc$data","data","fullname","email","cartoon_name","push","key","id","setState","ref","firestore","collection","unsubscribe","state","onSnapshot","react_default","a","createElement","class","Link","to","map","cartoon","Component","Boolean","window","location","hostname","match","Edit","onChange","e","target","name","value","onSubmit","preventDefault","_this$state","set","then","docRef","history","params","catch","error","console","_this2","get","exists","log","concat","for","type","title","placeholder","Create","add","_this$state2","cols","rows","Show","isLoading","_this3","delete","onClick","bind","ReactDOM","render","BrowserRouter","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4d6ee60.chunk.js","sourcesContent":["import * as firebase from 'firebase';\n//import firestore from 'firebase/firestore'\n\nconst settings = {timestampsInSnapshots: true};\n\nconst config = {\n  apiKey: \"AIzaSyDWv0ytli8it30rUKiF6MwAW8rJC_NFSTE\",\n  authDomain: \"webeng-hybrid-app.firebaseapp.com\",\n  databaseURL: \"https://webeng-hybrid-app.firebaseio.com\",\n  projectId: \"webeng-hybrid-app\",\n  storageBucket: \"webeng-hybrid-app.appspot.com\",\n  messagingSenderId: \"721494888940\",\n};\n\nfirebase.initializeApp(config);\n\nfirebase.firestore().settings(settings);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './App.css';\nimport firebase from './Firebase';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.ref = firebase.firestore().collection('request_cartoon');\n    this.unsubscribe = null;\n    this.state = {\n      request_cartoon: []\n    };\n  }\n\n  onCollectionUpdate = (querySnapshot) => {\n    const request_cartoon = [];\n    querySnapshot.forEach((doc) => {\n      const { fullname, email, cartoon_name } = doc.data();\n      request_cartoon.push({\n        key: doc.id,\n        doc, // DocumentSnapshot\n        fullname,\n        email,\n        cartoon_name,\n      });\n    });\n    this.setState({\n      request_cartoon\n   });\n  }\n\n  componentDidMount() {\n    this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\n  }\n\n  render() {\n    return (\n      <div class=\"container\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">\n              CARTOON LIST\n            </h3>\n          </div>\n          <div class=\"panel-body\">\n            <h4><Link to=\"/create\" class=\"btn btn-primary\">Add Cartoon</Link></h4>\n            <table class=\"table table-stripe\">\n              <thead>\n                <tr>\n                  <th>Fullname</th>\n                  <th>Email</th>\n                  <th>Cartoon name</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.request_cartoon.map(cartoon =>\n                  <tr>\n                    <td>{cartoon.fullname}</td>\n                    <td>{cartoon.email}</td>\n                    <td>{cartoon.cartoon_name}</td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport firebase from '../Firebase';\nimport { Link } from 'react-router-dom';\n\nclass Edit extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      key: '',\n      fullname: '',\n      email: '',\n      cartoon_name: ''\n    };\n  }\n\n  componentDidMount() {\n    const ref = firebase.firestore().collection('request_cartoon').doc(this.props.match.params.id);\n    ref.get().then((doc) => {\n      if (doc.exists) {\n        const cartoon = doc.data();\n        this.setState({\n          key: doc.id,\n          fullname: cartoon.fullname,\n          email: cartoon.email,\n          cartoon_name: cartoon.cartoon_name\n        });\n      } else {\n        console.log(\"No such cartoon!\");\n      }\n    });\n  }\n\n  onChange = (e) => {\n    const state = this.state\n    state[e.target.name] = e.target.value;\n    this.setState({cartoon:state});\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    const { fullname, email, cartoon_name } = this.state;\n\n    const updateRef = firebase.firestore().collection('request_cartoon').doc(this.state.key);\n    updateRef.set({\n      fullname,\n      email,\n      cartoon_name\n    }).then((docRef) => {\n      this.setState({\n        key: '',\n        fullname: '',\n        email: '',\n        cartoon_name: ''\n      });\n      this.props.history.push(\"/show/\"+this.props.match.params.id)\n    })\n    .catch((error) => {\n      console.error(\"Error adding cartoon: \", error);\n    });\n  }\n\n  render() {\n    return (\n      <div class=\"container\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">\n              EDIT CARTOON \n            </h3>\n          </div>\n          <div class=\"panel-body\">\n            <h4><Link to={`/show/${this.state.key}`} class=\"btn btn-primary\">Cartoon List</Link></h4>\n            <form onSubmit={this.onSubmit}>\n              <div class=\"form-group\">\n                <label for=\"title\">Fullname:</label>\n                <input type=\"text\" class=\"form-control\" name=\"fullname\" value={this.state.title} onChange={this.onChange} placeholder=\"Fullname\" />\n              </div>\n              <div class=\"form-group\">\n                <label for=\"description\">Email:</label>\n                <input type=\"text\" class=\"form-control\" name=\"description\" value={this.state.email} onChange={this.onChange} placeholder=\"Email\" />\n              </div>\n              <div class=\"form-group\">\n                <label for=\"author\">Cartoon name:</label>\n                <input type=\"text\" class=\"form-control\" name=\"cartoon_name\" value={this.state.cartoon_name} onChange={this.onChange} placeholder=\"Cartoon name\" />\n              </div>\n              <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Edit;\n","import React, { Component } from 'react';\nimport firebase from '../Firebase';\nimport { Link } from 'react-router-dom';\n\nclass Create extends Component {\n\n  constructor() {\n    super();\n    this.ref = firebase.firestore().collection('request_cartoon');\n    this.state = {\n      fullname: '',\n      email: '',\n      cartoon_name: ''\n    };\n  }\n  onChange = (e) => {\n    const state = this.state\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    const { fullname, email, cartoon_name } = this.state;\n\n    this.ref.add({\n      fullname,\n      email,\n      cartoon_name\n    }).then((docRef) => {\n      this.setState({\n        fullname: '',\n        email: '',\n        cartoon_name: ''\n      });\n      this.props.history.push(\"/\")\n    })\n    .catch((error) => {\n      console.error(\"Error adding cartoon: \", error);\n    });\n  }\n\n  render() {\n    const { fullname, email, cartoon_name } = this.state;\n    return (\n      <div class=\"container\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">\n              ADD CARTOON\n            </h3>\n          </div>\n          <div class=\"panel-body\">\n            <h4><Link to=\"/\" class=\"btn btn-primary\">Cartoon List</Link></h4>\n            <form onSubmit={this.onSubmit}>\n              <div class=\"form-group\">\n                <label for=\"title\">Fullname:</label>\n                <input type=\"text\" class=\"form-control\" name=\"fullname\" value={fullname} onChange={this.onChange} placeholder=\"Fullname\" />\n              </div>\n              <div class=\"form-group\">\n                <label for=\"description\">Email:</label>\n                <textArea class=\"form-control\" name=\"email\" onChange={this.onChange} placeholder=\"Email\" cols=\"80\" rows=\"3\">{email}</textArea>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"author\">Cartoon name:</label>\n                <input type=\"text\" class=\"form-control\" name=\"cartoon_name\" value={cartoon_name} onChange={this.onChange} placeholder=\"Cartoon name\" />\n              </div>\n              <button type=\"submit\" class=\"btn btn-success\">Submit</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Create;\n","import React, { Component } from 'react';\nimport firebase from '../Firebase';\nimport { Link } from 'react-router-dom';\n\nclass Show extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cartoon: {}, //board -> cartoon\n      key: ''\n    };\n  }\n\n  componentDidMount() {\n    //boards -> CollectionName -> request_cartoon\n    const ref = firebase.firestore().collection('request_cartoon').doc(this.props.match.params.id);\n    ref.get().then((doc) => {\n      if (doc.exists) {\n        this.setState({\n          cartoon: doc.data(),\n          key: doc.id,\n          isLoading: false\n        });\n      } else {\n        console.log(\"No such Cartoon\");\n      }\n    });\n  }\n\n  delete(id){\n    firebase.firestore().collection('request_cartoon').doc(id).delete().then(() => {\n      console.log(\"Cartoon successfully deleted!\");\n      this.props.history.push(\"/\")\n    }).catch((error) => {\n      console.error(\"Error removing cartoon: \", error);\n    });\n  }\n\n  render() {\n    return (\n      <div class=\"container\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n          <h4><Link to=\"/\">Cartoon List</Link></h4>\n            <h3 class=\"panel-title\">\n              {this.state.cartoon.fullname}\n            </h3>\n          </div>\n          <div class=\"panel-body\">\n            <dl>\n              <dt>Email:</dt>\n              <dd>{this.state.cartoon.email}</dd>\n              <dt>Cartoon name:</dt>\n              <dd>{this.state.cartoon.cartoon_name}</dd>\n            </dl>\n            <Link to={`/edit/${this.state.key}`} class=\"btn btn-success\">Edit</Link>&nbsp;\n            <button onClick={this.delete.bind(this, this.state.key)} class=\"btn btn-danger\">Delete</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Show;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Edit from './components/Edit';\nimport Create from './components/Create';\nimport Show from './components/Show';\n\nReactDOM.render(\n  <Router>\n      <div>\n        <Route exact path='/' component={App} />\n        <Route path='/edit/:id' component={Edit} />\n        <Route path='/create' component={Create} />\n        <Route path='/show/:id' component={Show} />\n      </div>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}